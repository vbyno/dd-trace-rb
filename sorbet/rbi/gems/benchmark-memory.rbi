# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/benchmark-memory/all/benchmark-memory.rbi
#
# benchmark-memory-0.1.2

module Benchmark
  extend Benchmark::Memory
end
module Benchmark::Memory
  def memory(quiet: nil); end
end
class Benchmark::Memory::Error < StandardError
end
class Benchmark::Memory::ConfigurationError < Benchmark::Memory::Error
end
module Benchmark::Memory::Helpers
  def rjust(label); end
  def scale(value); end
  def self.scale(value); end
end
class Benchmark::Memory::Measurement
  def <=>(other); end
  def allocated_memory; end
  def each(*args, &block); end
  def initialize(memory:, objects:, strings:); end
  def memory; end
  def metrics; end
  def objects; end
  def self.from_result(result); end
  def strings; end
  extend Forwardable
  include Comparable
  include Enumerable
end
class Benchmark::Memory::Measurement::Metric
  def <=>(other); end
  def allocated; end
  def initialize(type, allocated, retained); end
  def retained; end
  def type; end
  include Comparable
end
class Benchmark::Memory::Job
  def compare!; end
  def compare?; end
  def full_report; end
  def hold!(held_path); end
  def holding?(*args, &block); end
  def initialize(output: nil, quiet: nil); end
  def quiet?; end
  def report(label = nil, &block); end
  def run; end
  def run_comparison; end
  def run_task(task); end
  def tasks; end
  extend Forwardable
end
class Benchmark::Memory::Job::Task
  def action; end
  def call; end
  def initialize(label, action); end
  def label; end
  def while_measuring_memory_usage(&block); end
end
class Benchmark::Memory::Job::IOOutput
  def initialize(io); end
  def put_comparison(comparison); end
  def put_entry(entry); end
  def put_header; end
  def put_hold_notice; end
end
class Benchmark::Memory::Job::IOOutput::MetricFormatter
  def initialize(metric); end
  def metric; end
  def to_s; end
  include Benchmark::Memory::Helpers
end
class Benchmark::Memory::Job::IOOutput::ComparisonFormatter
  def add_best_summary(best, output); end
  def add_comparison(entry, best, output); end
  def comparison; end
  def comparison_between(entry, best); end
  def initialize(comparison); end
  def summary_message(message, entry); end
  def to_s; end
  include Benchmark::Memory::Helpers
end
class Benchmark::Memory::Job::IOOutput::EntryFormatter
  def entry; end
  def initialize(entry); end
  def to_s; end
  include Benchmark::Memory::Helpers
end
class Benchmark::Memory::Job::NullOutput
  def put_comparison(comparison); end
  def put_entry(entry); end
  def put_header; end
end
class Benchmark::Memory::HeldResults
  def [](*args, &block); end
  def add_result(entry); end
  def any?; end
  def cleanup; end
  def holding?; end
  def include?(entry); end
  def initialize(path = nil); end
  def load; end
  def path; end
  def path=(arg0); end
  def results; end
  def with_hold_file(access_mode = nil, &_block); end
  extend Forwardable
end
class Benchmark::Memory::HeldResults::Serializer
  def initialize(object = nil); end
  def load(_hash); end
  def object; end
  def self.load(json); end
  def to_h; end
  def to_json; end
  def to_s; end
end
class Benchmark::Memory::HeldResults::MetricSerializer < Benchmark::Memory::HeldResults::Serializer
  def load(hash); end
  def to_h; end
end
class Benchmark::Memory::HeldResults::MeasurementSerializer < Benchmark::Memory::HeldResults::Serializer
  def load(hash); end
  def to_h; end
end
class Benchmark::Memory::Report
  def add_entry(task, measurement); end
  def comparable?; end
  def comparison; end
  def entries; end
  def initialize; end
end
class Benchmark::Memory::Report::Entry
  def allocated_memory; end
  def initialize(label, measurement); end
  def label; end
  def measurement; end
end
class Benchmark::Memory::HeldResults::EntrySerializer < Benchmark::Memory::HeldResults::Serializer
  def load(hash); end
  def to_h; end
end
class Benchmark::Memory::Report::Comparison
  def entries; end
  def initialize(entries); end
  def possible?; end
end
